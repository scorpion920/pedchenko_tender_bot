"""
tender_api.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ ProZorro API.

–¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –∫–ª–∞—Å `ProZorroAPI`, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
- –í–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API ProZorro
- –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –∑–∞ CPV –∫–æ–¥–∞–º–∏ —Ç–∞ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏
- –ü—ñ–¥–≥–æ—Ç–æ–≤–∫—É —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è Telegram –±–æ—Ç–∞
- –ü—ñ–¥—Ç—Ä–∏–º–∫—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
"""

import time
import logging
import requests
from typing import List, Dict

from config import (
    BASE_URL, CPV_CODES, ALLOWED_REGIONS, ALLOWED_REGION_KEYWORDS,
    SESSION_HEADERS, PAGE_LIMIT, MAX_PAGES, REQUEST_TIMEOUT, REQUEST_DELAY
)

logger = logging.getLogger(__name__)


class ProZorroAPI:
    """
    –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ ProZorro API.

    Attributes:
        session (requests.Session): HTTP-—Å–µ—Å—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
        seen_tenders (set): –º–Ω–æ–∂–∏–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤
    """

    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(SESSION_HEADERS)
        self.seen_tenders = set()

    def _is_region_allowed(self, address: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∞–¥—Ä–µ—Å–∞ –∑–∞–º–æ–≤–Ω–∏–∫–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤.

        Args:
            address (str): —Ä—è–¥–æ–∫ –∑ –∞–¥—Ä–µ—Å–æ—é –∑–∞–º–æ–≤–Ω–∏–∫–∞

        Returns:
            bool: True, —è–∫—â–æ –∞–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä—É; False ‚Äî —ñ–Ω–∞–∫—à–µ
        """
        if not address:
            return False
        return any(region in address for region in ALLOWED_REGIONS) or \
               any(keyword in address for keyword in ALLOWED_REGION_KEYWORDS)

    def _is_cpv_allowed(self, cpv_code: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ CPV-–∫–æ–¥ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö.

        Args:
            cpv_code (str): CPV-–∫–æ–¥ (–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä)

        Returns:
            bool: True, —è–∫—â–æ –∫–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä—É; False ‚Äî —ñ–Ω–∞–∫—à–µ
        """
        return any(cpv_code.startswith(code[:4]) for code in CPV_CODES)

    def _fetch_page(self, offset: str = "") -> Dict:
        """
        –í–∏–∫–æ–Ω—É—î HTTP-–∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –∑ API.

        Args:
            offset (str): –∫—É—Ä—Å–æ—Ä –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó (–ø–æ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—é ‚Äî –ø–æ—Ä–æ–∂–Ω—ñ–π)

        Returns:
            dict: JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API

        Raises:
            requests.RequestException: —É –≤–∏–ø–∞–¥–∫—É –ø—Ä–æ–±–ª–µ–º –∑ –º–µ—Ä–µ–∂–µ—é
        """
        url = f"{BASE_URL}?limit={PAGE_LIMIT}&offset={offset}"
        logger.debug(f"–ó–∞–ø–∏—Ç –¥–æ API: {url}")

        response = self.session.get(url, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        return response.json()

    def search_tenders(self) -> List[str]:
        """
        –ü–æ—à—É–∫ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.

        Returns:
            List[str]: —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Ç–µ–Ω–¥–µ—Ä–∏
        """
        results = []
        offset = ""
        pages = 0

        try:
            while pages < MAX_PAGES:
                data = self._fetch_page(offset)
                tenders = data.get("data", [])
                offset = data.get("next_page", {}).get("offset")
                pages += 1

                logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(tenders)} —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {pages}")

                for tender in tenders:
                    tender_id = tender.get("id")
                    if not tender_id or tender_id in self.seen_tenders:
                        continue

                    self.seen_tenders.add(tender_id)

                    procuring_entity = tender.get("procuringEntity", {})
                    address = procuring_entity.get("address", {}).get("region", "")
                    cpv_code = tender.get("classification", {}).get("id", "")

                    if not self._is_region_allowed(address):
                        continue
                    if not self._is_cpv_allowed(cpv_code):
                        continue

                    tender_info = (
                        f"üìå *{tender.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}*\n"
                        f"üè¢ –ó–∞–º–æ–≤–Ω–∏–∫: {procuring_entity.get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                        f"üìç –†–µ–≥—ñ–æ–Ω: {address}\n"
                        f"üÜî ID: {tender.get('tenderID')}\n"
                        f"üí∞ –ë—é–¥–∂–µ—Ç: {tender.get('value', {}).get('amount', '–ù–µ–≤—ñ–¥–æ–º–æ')} "
                        f"{tender.get('value', {}).get('currency', '')}\n"
                        f"üîó [–î–µ—Ç–∞–ª—ñ](https://prozorro.gov.ua/tender/{tender_id})"
                    )
                    results.append(tender_info)

                if not offset:  # –Ø–∫—â–æ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î —Å—Ç–æ—Ä—ñ–Ω–æ–∫
                    break

                time.sleep(REQUEST_DELAY)

        except requests.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ ProZorro API: {e}")
        except Exception as e:
            logger.exception(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤: {e}")

        return results
