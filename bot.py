"""
Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤ ProZorro
"""
import time
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue

from config import TELEGRAM_TOKEN, CHAT_ID, CHECK_INTERVAL
from tender_api import ProZorroAPI


class TenderBot:
    """–ö–ª–∞—Å Telegram –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤"""
    
    def __init__(self):
        self.api = ProZorroAPI()
        self.sent_tenders = set()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ tender_id
    
    def start_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = (
            "üöÄ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤ ProZorro!\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/tenders - –ó–Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–µ–Ω–¥–µ—Ä–∏\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É\n\n"
            "ü§ñ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–æ–≤—ñ —Ç–µ–Ω–¥–µ—Ä–∏ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω"
        )
        update.message.reply_text(welcome_message)
    
    def help_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_message = (
            "üìñ –î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
            "üîç –§—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É:\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å: active.tendering (–ø—Ä–∏–π–æ–º –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π)\n"
            "‚Ä¢ –†–µ–≥—ñ–æ–Ω–∏: –ö–∏—ó–≤, –ß–µ—Ä–∫–∞—Å–∏\n"
            "‚Ä¢ CPV –∫–æ–¥–∏: –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ —Ç–∞ —Ä–µ–º–æ–Ω—Ç (1542xxx-1598xxx)\n\n"
            "‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∏:\n"
            "/tenders - –†—É—á–Ω–∏–π –ø–æ—à—É–∫ —Ç–µ–Ω–¥–µ—Ä—ñ–≤\n"
            "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n"
            "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω"
        )
        update.message.reply_text(help_message)
    
    def tenders_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /tenders - —Ä—É—á–Ω–∏–π –ø–æ—à—É–∫ —Ç–µ–Ω–¥–µ—Ä—ñ–≤"""
        try:
            update.message.reply_text("üîÑ –®—É–∫–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–µ–Ω–¥–µ—Ä–∏...")
            
            messages = self.api.search_tenders()
            
            if not messages:
                update.message.reply_text("‚ùå –ù–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–µ–Ω–¥–µ—Ä –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            for message in messages:
                context.bot.send_message(
                    chat_id=update.effective_chat.id, 
                    text=message
                )
                time.sleep(0.2)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                
            update.message.reply_text(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(messages)} —Ç–µ–Ω–¥–µ—Ä—ñ–≤!")
            
        except Exception as e:
            update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    def periodic_check(self, context: CallbackContext):
        """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤"""
        try:
            print("üîÑ –í–∏–∫–æ–Ω—É—é –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤...")
            
            messages = self.api.search_tenders()
            
            if messages:
                for message in messages:
                    context.bot.send_message(chat_id=CHAT_ID, text=message)
                    time.sleep(0.2)
                
                print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {len(messages)} –Ω–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤")
            else:
                print("‚ÑπÔ∏è –ù–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ–π –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dp = updater.dispatcher
        jq: JobQueue = updater.job_queue

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", self.start_command))
        dp.add_handler(CommandHandler("help", self.help_command))
        dp.add_handler(CommandHandler("tenders", self.tenders_command))

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        jq.run_repeating(self.periodic_check, interval=CHECK_INTERVAL, first=10)

        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /help, /tenders")
        print(f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ {CHECK_INTERVAL//60} —Ö–≤–∏–ª–∏–Ω")
        
        updater.start_polling()
        updater.idle()


if __name__ == "__main__":
    bot = TenderBot()
    bot.run()
