import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)
from tender_api import ProZorroAPI
from config import TELEGRAM_TOKEN, CHAT_ID, CHECK_INTERVAL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

api = ProZorroAPI()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤ ProZorro.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
    help_text = (
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
        "/help - –¥–æ–≤—ñ–¥–∫–∞\n"
        "/tenders - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤"
    )
    await update.message.reply_text(help_text)

async def tenders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /tenders."""
    try:
        results = api.search_tenders()

        if not results:
            await update.message.reply_text("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤.")
            return

        for tender in results[:5]:  # –æ–±–º–µ–∂–∏–º–æ –≤–∏–≤—ñ–¥ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
            await update.message.reply_text(
                tender,
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É –∫–æ–º–∞–Ω–¥—ñ /tenders: {e}")
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–µ–Ω–¥–µ—Ä—ñ–≤.")

async def auto_check(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤."""
    try:
        results = api.search_tenders()

        for tender in results:
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=tender,
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")

def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("tenders", tenders))

    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–∂–Ω—ñ N —Å–µ–∫—É–Ω–¥
    application.job_queue.run_repeating(auto_check, interval=CHECK_INTERVAL, first=10)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling()

if __name__ == "__main__":
    main()