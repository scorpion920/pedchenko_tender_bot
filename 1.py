from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue
import time
import requests
from datetime import datetime
from typing import List
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# -------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------------
TELEGRAM_TOKEN = "8233329358:AAEdJ2_qfvu9at-xGCRMEcGAgzRq28FHhBs"  # –≤—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
CHAT_ID = 1423587664  # —Ç–≤—ñ–π Telegram ID –∞–±–æ –≥—Ä—É–ø–∏

BASE_URL = "https://public.api.openprocurement.org/api/2.5/tenders"
CPV_CODES = ["15420000", "15330000", "15320000", "15610000", "15620000",
             "15810000", "15820000", "15830000", "15840000", "15850000",
             "15860000", "15870000", "15980000"]
ALLOWED_REGIONS = ["–ö–∏—ó–≤—Å—å–∫–∞", "–ß–µ—Ä–∫–∞—Å—å–∫–∞"]
ALLOWED_REGION_KEYWORDS = ["–ö–∏—ó–≤", "–ß–µ—Ä–∫–∞"]
SESSION_HEADERS = {"User-Agent": "pedchenko-tender-bot/1.0 (contact: example@example.com)"}

PAGE_LIMIT = 50
MAX_PAGES = 3
CHECK_INTERVAL = 600  # 10 —Ö–≤–∏–ª–∏–Ω

sent_tenders = set()  # –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ tender_id

# -------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
# -------------------------------
def create_session() -> requests.Session:
    session = requests.Session()
    retries = Retry(total=3, backoff_factor=0.5,
                    status_forcelist=[429, 500, 502, 503, 504],
                    allowed_methods=["GET"], raise_on_status=False)
    adapter = HTTPAdapter(max_retries=retries)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    session.headers.update(SESSION_HEADERS)
    return session

SESSION = create_session()

# -------------------------------
# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ç–µ–Ω–¥–µ—Ä—ñ–≤
# -------------------------------
def get_tenders(limit=PAGE_LIMIT):
    try:
        response = SESSION.get(BASE_URL, params={"limit": limit, "descending": 1}, timeout=15)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–Ω–¥–µ—Ä—ñ–≤: {e}")
        return {}

def get_tender_details(tender_id):
    try:
        url = f"{BASE_URL}/{tender_id}"
        response = SESSION.get(url, timeout=15)
        response.raise_for_status()
        return response.json().get('data', {})
    except requests.RequestException as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}")
        return {}

# -------------------------------
# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
# -------------------------------
def format_tender_message(details):
    items = details.get('items', []) or []
    raw_cpvs: List[str] = list({(item.get('classification', {}) or {}).get('id', '') for item in items if item.get('classification')})
    item_cpvs = [cpv.split('-')[0] if isinstance(cpv, str) else '' for cpv in raw_cpvs]

    tender_period = details.get('tenderPeriod', {}) or {}
    deadline_str = tender_period.get('endDate', None)
    if deadline_str:
        try:
            deadline = datetime.fromisoformat(deadline_str.replace("Z", "+00:00")).strftime("%d.%m.%Y %H:%M")
        except Exception:
            deadline = deadline_str
    else:
        deadline = "–ù–µ–º–∞—î –¥–µ–¥–ª–∞–π–Ω—É"

    procuring_entity = details.get('procuringEntity', {}) or {}
    edrpou = (procuring_entity.get('identifier', {}) or {}).get('id', '–ù–µ–º–∞—î –Ñ–î–†–ü–û–£')
    tender_url = f"https://prozorro.gov.ua/tender/{details.get('id')}"

    message = f"üìå –ù–æ–≤–∏–π —Ç–µ–Ω–¥–µ—Ä!\n" \
              f"Tender ID: {details.get('id')}\n" \
              f"–ü—Ä–µ–¥–º–µ—Ç –∑–∞–∫—É–ø—ñ–≤–ª—ñ: {details.get('title', '–ù–µ–º–∞—î –Ω–∞–∑–≤–∏')}\n" \
              f"CPV –ö–æ–¥: {', '.join(item_cpvs)}\n" \
              f"–°—Ç–∞—Ç—É—Å: {details.get('status', '–ù–µ–º–∞—î —Å—Ç–∞—Ç—É—Å—É')}\n" \
              f"–î–µ–¥–ª–∞–π–Ω: {deadline}\n" \
              f"–ó–∞–º–æ–≤–Ω–∏–∫: {procuring_entity.get('name', '–ù–µ–º–∞—î –∑–∞–º–æ–≤–Ω–∏–∫–∞')}\n" \
              f"–Ñ–î–†–ü–û–£: {edrpou}\n" \
              f"–°—É–º–∞: {details.get('value', {}).get('amount', '–Ω–µ–º–∞—î –±—é–¥–∂–µ—Ç—É')} {details.get('value', {}).get('currency', '')}\n" \
              f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {tender_url}"
    return message

# -------------------------------
# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—É
# -------------------------------
def fetch_tenders():
    first_page = get_tenders(limit=PAGE_LIMIT)
    if not first_page or not first_page.get('data'):
        return []

    next_offset = (first_page.get('next_page') or {}).get('offset')
    tenders_pages = [first_page.get('data', [])]

    for _ in range(MAX_PAGES - 1):
        if not next_offset:
            break
        try:
            page = SESSION.get(BASE_URL, params={"limit": PAGE_LIMIT, "descending": 1, "offset": next_offset}, timeout=15)
            page.raise_for_status()
            page_json = page.json()
            tenders_pages.append(page_json.get('data', []))
            next_offset = (page_json.get('next_page') or {}).get('offset')
        except Exception:
            break

    results = []
    for tenders in tenders_pages:
        for tender in tenders:
            tender_id = tender.get('id')
            if not tender_id or tender_id in sent_tenders:
                continue

            details = get_tender_details(tender_id)
            if not details:
                continue

            if details.get('status') != "active.tendering":
                continue

            items = details.get('items', []) or []
            raw_cpvs: List[str] = list({(item.get('classification', {}) or {}).get('id', '') for item in items if item.get('classification')})
            item_cpvs = [cpv.split('-')[0] if isinstance(cpv, str) else '' for cpv in raw_cpvs]
            matches_cpv = any((cpv or '').startswith(code) for cpv in item_cpvs for code in CPV_CODES)
            if not matches_cpv:
                continue

            procuring_entity = details.get('procuringEntity', {}) or {}
            region = (procuring_entity.get('address', {}) or {}).get('region', '')
            if not (region in ALLOWED_REGIONS or any(kw in region for kw in ALLOWED_REGION_KEYWORDS)):
                continue

            sent_tenders.add(tender_id)
            results.append(details)

    return results

# -------------------------------
# Telegram-–∫–æ–º–∞–Ω–¥–∞ /tenders
# -------------------------------
def tenders_command(update: Update, context: CallbackContext):
    bot = context.bot
    try:
        update.message.reply_text("üîÑ –®—É–∫–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–µ–Ω–¥–µ—Ä–∏...")
        tenders = fetch_tenders()
        if not tenders:
            update.message.reply_text("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.")
            return
        for t in tenders:
            bot.send_message(chat_id=update.effective_chat.id, text=format_tender_message(t))
            time.sleep(0.2)
    except Exception as e:
        update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------------------
# –§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
# -------------------------------
def periodic_check(context: CallbackContext):
    bot = context.bot
    try:
        tenders = fetch_tenders()
        for t in tenders:
            bot.send_message(chat_id=CHAT_ID, text=format_tender_message(t))
            time.sleep(0.2)
    except Exception as e:
        print(f"Periodic check error: {e}")

# -------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------------
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    jq: JobQueue = updater.job_queue

    # –ö–æ–º–∞–Ω–¥–∞ /tenders
    dp.add_handler(CommandHandler("tenders", tenders_command))

    # –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–∑ –Ω–∞ 10 —Ö–≤
    jq.run_repeating(periodic_check, interval=CHECK_INTERVAL, first=10)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /tenders –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤.")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
